#!/usr/bin/env python2.5
# mknbi-linux-netxfer - Creates a network-bootable Linux image for the Evo T30
#
# Copyright (C) 2009 Dwayne C. Litzenberger <dlitz@dlitz.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import getopt
import struct

VERSION_STRING = """
mknbi-linux-netxfer 0.1
Copyright (C) 2009 Dwayne C. Litzenberger
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Dwayne Litzenberger.
"""

# Defaults
DEFAULT_LOADER = "boot/loader.bin"
DEFAULT_LOAD_ADDRESS = 0x01000000
DEFAULT_CMDLINE = "auto"

# Vendor flags
DEBUG_FLAG = (1 << 8)       # Set this on the loader.bin record to enable debugging

def exit_version():
    sys.stdout.write(VERSION_STRING.lstrip())
    sys.exit(0)

def exit_usage(status=2, outfile=sys.stderr):
    outfile.write("""
Usage: %(ARGV0)s [OPTION] bzImage [initrd]
Create a network-bootable image that loads Linux and an optional ramdisk image.

  -c CMDLINE           Use the specified kernel command-line. (default: %(CMD)s)
  -C FILE              Load the kernel command-line from the specified file.
  -d                   Enable debugging output during boot-up.
  -L FILE              Use FILE as the bootloader binary. (default: %(LOADER)s)
  -o, --output=FILE    Write output to FILE. (default is to write to stdout)
  --help            Show this help and exit.
  --version         Show version information and exit.
""".lstrip() % {
        'ARGV0' : sys.argv[0],
        'LOADER': DEFAULT_LOADER,
        'CMD': DEFAULT_CMDLINE,
    })
    sys.exit(status)

# Parse command-line
loader_filename = DEFAULT_LOADER
load_address = DEFAULT_LOAD_ADDRESS
cmdline = DEFAULT_CMDLINE
output_filename = None
debug_mode = False
try:
    (options, args) = getopt.getopt(sys.argv[1:], "do:L:c:C:",
        ['output=', 'help', 'version'])
except getopt.GetoptError, exc:
    sys.stderr.write("%s: error: %s\n" % (sys.argv[0], str(exc)))
    sys.exit(2)

# Handle options
for (opt, value) in options:
    if opt in ('-o', '--output'):
        output_filename = value
    elif opt == '-L':
        loader_filename = value
    elif opt == '-c':
        cmdline = value.replace("\r\n", " ").replace("\n", " ")
    elif opt == '-C':
        cmdline = "".join(line for line in open(value, "r") if not line.startswith("#")).replace("\r\n", " ").replace("\n", " ")
    elif opt == '-d':
        debug_mode = True
    elif opt == '--help':
        exit_usage(0, sys.stdout)
    elif opt == '--version':
        exit_version()
    else:
        raise AssertionError("BUG: Unrecognized option %r=%r" % (opt, value))

# Handle arguments
if len(args) == 1:
    bzImage_filename = args[0]
    initrd_filename = None
elif len(args) == 2:
    (bzImage_filename, initrd_filename) = args
else:
    exit_usage()

# Read the loader
loader_data = open(loader_filename, "rb").read()

# Read the kernel bzImage
bzImage_data = open(bzImage_filename, "rb").read()

# Read the initial ramdisk
if initrd_filename is None:
    initrd_data = ""
else:
    initrd_data = open(initrd_filename, "rb").read()

# Create fake e820 memory map
# Entries are given as: (address64, length64, type32)
e820_map = ""
# e820: 0x00000000 - 0x01ffffff (32 MiB) usable (but see below)
e820_map += struct.pack("<QQL", 0x00000000, 0x02000000, 1)
# e820: 0x00000000 - 0x0001ffff (128 KiB) reserved (Low memory, just in case)
e820_map += struct.pack("<QQL", 0x00000000, 0x00020000, 2)
# e820: 0x000a0000 - 0x000cffff (192 KiB) reserved (Video BIOS, just in case)
e820_map += struct.pack("<QQL", 0x000a0000, 0x00030000, 2)
# e820: 0x000e0000 - 0x000fffff (128 KiB) reserved (BIOS, just in case)
e820_map += struct.pack("<QQL", 0x000e0000, 0x00020000, 2)
# e820: 0x01d80000 - 0x01ffffff (2.5 MiB) reserved (Necessary; Not writable)
e820_map += struct.pack("<QQL", 0x01d80000, 0x00280000, 2)

# NBI header record
header = struct.pack("<LLLL",
    0x1b031336,     # NBI magic
    0x4,            # flags and length
    0x0000c00d,     # real-mode load address for the 512-byte header (ds:bx format)
    0x0000c200)     # real-mode execute address (cs:ip) format

# Load address
p = load_address

# loader.bin - must be loaded at load_address
assert p == load_address
ftl = 0x00000004
if debug_mode: ftl = 0x00000004 | DEBUG_FLAG
header += struct.pack("<LLLL",
    ftl,                # flags, tags, lengths
    p,                  # Load address (32-bit linear address)
    len(loader_data),   # Image length in bytes
    len(loader_data))   # Memory length in bytes
p += len(loader_data)

# cmdline - kernel command line
cmdline += "\0" # Append NUL to end of string
header += struct.pack("<LLLL",
    0x00000004,         # flags, tags, lengths
    p,                  # Load address (32-bit linear address)
    len(cmdline),       # Image length in bytes
    len(cmdline))       # Memory length in bytes
p += len(cmdline)

# bzImage
p = (p & ~0xfff) + 0x1000   # Align to 4096-byte boundary
header += struct.pack("<LLLL",
    0x00000004,         # flags, tags, lengths
    p,                  # Load address (32-bit linear address)
    len(bzImage_data),  # Image length in bytes
    len(bzImage_data))  # Memory length in bytes
p += len(bzImage_data)

# initrd
p = (p & ~0xfff) + 0x1000   # Align to 4096-byte boundary
header += struct.pack("<LLLL",
    0x00000004,         # flags, tags, lengths
    p,                  # Load address (32-bit linear address)
    len(initrd_data),   # Image length in bytes
    len(initrd_data))   # Memory length in bytes
p += len(initrd_data)

# fake e820 memory map
p = (p & ~0xfff) + 0x1000   # Align to 4096-byte boundary
header += struct.pack("<LLLL",
    0x04000004,         # flags, tags, lengths
    p,                  # Load address (32-bit linear address)
    len(e820_map),      # Image length in bytes
    len(e820_map))      # Memory length in bytes
p += len(e820_map)

header += "\0" * (512 - len(header) - 16) # padding
header += struct.pack("<xxxBLHxxxxxx",
    0xea,           # ljmp absolute (JMP ptr16:32 - Jump far, absolute, addres given in operand)
    load_address,   # 32-bit linear address where loader.bin is loaded
    0x0008)         # 16-bit segment selector (protected-mode %cs register gets set to this value)

assert len(header) == 512

# Write the image
if output_filename is not None:
    outfile = open(output_filename, "wb")
else:
    outfile = sys.stdout
outfile.write(header)
outfile.write(loader_data)  # nbi_header->entries[0]
outfile.write(cmdline)      # nbi_header->entries[1]
outfile.write(bzImage_data) # nbi_header->entries[2]
outfile.write(initrd_data)  # nbi_header->entries[3]
outfile.write(e820_map)     # nbi_header->entries[4]
outfile.flush()
if output_filename is not None:
    outfile.close()

# vim:set ts=4 sw=4 sts=4 expandtab:
